// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  username      String?   @unique
  password      String?   // For local authentication
  bio           String?
  location      String?
  website       String?
  githubId      String?   @unique
  githubUsername String?  @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  blogPosts     BlogPost[]
  comments      Comment[]
  likes         Like[]
  followers     Follow[] @relation("UserFollowers")
  following     Follow[] @relation("UserFollowing")
  sentMessages     Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")
  notifications    Notification[]
  collaborationRequests CollaborationRequest[] @relation("CollaborationSender")
  receivedCollaborationRequests CollaborationRequest[] @relation("CollaborationReceiver")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String
  githubUrl   String?
  demoUrl     String?
  language    String?
  stars       Int      @default(0)
  forks       Int      @default(0)
  tags        String[]
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  likes    Like[]
  comments Comment[]
  collaborationRequests CollaborationRequest[]
}

model BlogPost {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  excerpt   String?
  published Boolean  @default(false)
  tags      String[]
  readTime  Int?     // in minutes
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  likes    Like[]
  comments Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  projectId  String?
  project    Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  blogPostId String?
  blogPost   BlogPost? @relation(fields: [blogPostId], references: [id], onDelete: Cascade)

  parentId String?
  parent   Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  projectId  String?
  project    Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  blogPostId String?
  blogPost   BlogPost? @relation(fields: [blogPostId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@unique([userId, blogPostId])
}

model Follow {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())

  followerId  String
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  
  followingId String
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  senderId   String
  sender     User   @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  
  receiverId String
  receiver   User   @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  type      String   // "like", "comment", "follow", "collaboration", etc.
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Optional references to related entities
  relatedUserId String?
  relatedProjectId String?
  relatedBlogPostId String?
}

model CollaborationRequest {
  id        String   @id @default(cuid())
  message   String?
  status    String   @default("pending") // "pending", "accepted", "declined"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  senderId   String
  sender     User    @relation("CollaborationSender", fields: [senderId], references: [id], onDelete: Cascade)
  
  receiverId String
  receiver   User    @relation("CollaborationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  
  projectId  String
  project    Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId, projectId])
}

model NewsItem {
  id          String   @id @default(cuid())
  title       String
  url         String
  points      Int      @default(0)
  comments    Int      @default(0)
  author      String?
  thumbnail   String?
  source      String   @default("hackernews")
  category    String   @default("article") // news, article, tutorial, discussion
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}